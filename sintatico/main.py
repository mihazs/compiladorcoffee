##############
##  Expected layout of main file
##	 - import re and ll_parse_tools
##   	 - scanner (lexical) specs
##   	 - Grammar specs
##	Now to make it work
##	 - call get_parser, get a LL(1) parser object
##	 - call get_input, get input in desired form
##	 - call parse on the parser, feed it the input
##############

#import statements
from ll_parse_tools import *
import re

#Grammar specs 
g = \
'''BLOCO : NAME MAIN RES1 DCLVAR DCLFUNC CORPO RES2
DCLVAR : NAME REPIDENT RES4 TIPO RES3 LDVAR |  
REPIDENT : RES5 NAME REPIDENT |  
TIPO : INTEGER | INT | FLOAT | STRING | FLOAT_TYPE | DOUBLE | CHAR
LDVAR : LID : TIPO RES3 LDVAR |  
LID : NAME REPIDENT
DCLFUNC : TIPO_RETORNO NAME DEFPAR RES1 DCLVAR DCLFUNC CORPO RETURN LPAREN VALORRETORNO RPAREN RES2 DCLFUNC |  
TIPO_RETORNO : TIPO
VALORRETORNO : TIPO |  
DEFPAR : LPAREN PARAM RPAREN |  
PARAM : TIPO LPARAM
LPARAM : RES3 TIPO LPARAM |  
COMANDO : NAME RES6 EXPRESSAO | callfuncao NAME PARAMETROS | IF LPAREN NAME COMPARACAO RPAREN RES1 COMANDO RES3 REPCOMANDO RES1 ELSEPARTE | WHILE LPAREN NAME COMPARACAO RPAREN RES1 COMANDO RES3 REPCOMANDO RES2 | FOR LPAREN NAME RES6 CONTCOMPARACAO RES3 NAME COMPARACAO RES3 INCREMENTO RPAREN RES1 COMANDO RES3 REPCOMANDO RES2 | THEN RES1 COMANDO RES3 REPCOMANDO RES2 WHILE LPAREN NAME COMPARACAORPAREN | CIN COM8 NAME | COUT COM7 LITERAL SEQCOUT
CORPO : INICIO COMANDO RES3 REPCOMANDO FIM
REPCOMANDO : COMANDO RES3 REPCOMANDO |  
PARAMETROS : LPAREN TPARAM REPPAR RPAREN |  
REPPAR : RES5 TPARAM REPPAR |  
TPARAM : NAME
ELSEPARTE : ELSE RES1 COMANDO RES3 REPCOMANDO RES2 |  
COMPARACAO : COM5 CONTCOMPARACAO | COM6 CONTCOMPARACAO | COM1 CONTCOMPARACAO | COM3 CONTCOMPARACAO | COM2 CONTCOMPARACAO | COM4 CONTCOMPARACAO
CONTCOMPARACAO : NAME
INCREMENTO : PLUSP INTEGER | INT
DECREMENTO : MINUSM INTEGER | INT
SEQCOUT : COM7 NAME SEQUENCIA SEQCOUT |  
SEQUENCIA : RES5 NAME SEQUENCIA |  
EXPRESSAO : TERMO REPEXP | callfuncao NAME PARAMETROS
REPEXP : MINUS TERMO REPEXP | PLUS TERMO REPEXP |  
TERMO : FATOR REPTERMO
REPTERMO : TIMES FATOR REPTERMO | DIVIDE FATOR REPTERMO |  
FATOR : INTEGER | INT | FLOAT_TYPE | NAME | LPAREN EXPRESSAO RPAREN'''


#making it work
parser = get_parser(g)
f = open("../tokenized", "r")
input = f.read().split(" ")
result = parser.parse(input, True)
if result :
    print("Pertence a gramatica")
else :
    print("Nao pertence a gramatica")
